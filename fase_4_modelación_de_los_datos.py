# -*- coding: utf-8 -*-
"""Fase 4: modelación de los datos

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WmaBQQOJg_gJkxsfxT2Hj9atOdQ-d9lR
"""

import pandas as pd

df = pd.read_excel('datos.xlsx')

df.head()

df = df.iloc[:,3:9]

df.head()

df.info()

df.describe()

df.isnull().sum()

df= df.dropna()

df.isnull().values.any()

df.columns

x = df[['Presupuesto', 'Tiempo invertido', 'Tipo', 'Momento', 'No. de personas']].values # variables independientes
y = df['Costo'].values # variable dependiente

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)

y_test

from sklearn.linear_model import LinearRegression
model_regression = LinearRegression()

model_regression.fit(x_train, y_train) # aprendizaje automático con base en nuestros datos

x_labels = ['Presupuesto', 'Tiempo invertido', 'Tipo', 'Momento', 'No. de personas']
c_label = ['Coeficientes']

coeff_df = pd.DataFrame(model_regression.coef_, x_labels, c_label)
coeff_df

y_pred = model_regression.predict(x_test) # realiza la predicción con el modelo generado

residuals = pd.DataFrame({'Real': y_test, 'Predicción': y_pred, 'Residual': y_test - y_pred})
residuals = residuals.sample(n = 30)
residuals = residuals.sort_values(by='Real')
residuals

from sklearn.metrics import r2_score
r2_score(y_test, y_pred)

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt # importamos la librería pyplot que nos permitirá graficar
import numpy as np # importamos la librería numpy que nos permitirá crear un arreglo para la muestra de 30 datos

# función mágica para desplegar el gráfico en nuestra libreta
# %matplotlib inline

plt.scatter(np.arange(30), residuals['Real'], label = "Real")  # creamos el gráfico con la muestra de datos reales
plt.scatter(np.arange(30), residuals['Predicción'], label = "Predicción")  # creamos el gráfico con la muestra de datos de predicción

plt.title("Comparación de costos: Reales y Predicción") # indicamos el título del gráfico

plt.xlabel("30 observaciones de costos") # indicamos la etiqueta del eje de las x

plt.ylabel("Costos") # indicamos la etiqueta del eje de las y

plt.legend(loc='upper left') # indicamos la posición de la etiqueta de los datos

plt.show() # desplegamos el gráfico

import pandas as pd
df = pd.read_excel('datos.xlsx')
df.head()

df.columns

total_actividades = df["Número"].count()
total_actividades

df["Presupuesto"].max()

df.loc[df["Presupuesto"].idxmax(),"Nombre actividad"]

df["Presupuesto"].min()

df.loc[df["Presupuesto"].idxmin(),"Nombre actividad"]

df.groupby("Tipo").sum().iloc[0:,1:2].sort_values(by="Costo")
# Costo mmás bajo y más alto por tipo de actividad

total_dias = df["Fecha (dd/mm/aa)"].nunique()
total_dias

total_gastos = df["Costo"].sum()
total_gastos

ahorro = df["Presupuesto"].sum() - df["Costo"].sum()
ahorro

costo_autoregalo = 2000
ahorrodiario = ahorro / total_dias
print("Mi ahorro diario es $", round(ahorrodiario,2))

dias_ahorro = costo_autoregalo / ahorrodiario
print("Dias para seguir ahorrando", int(dias_ahorro))